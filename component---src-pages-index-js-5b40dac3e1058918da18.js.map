{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["CENTER","IndexPage","useTracker","api","data","stats","countries","hasCountries","Array","isArray","length","dashboardStats","primary","label","value","cases","toLocaleString","secondary","casesPerOneMillion","deaths","deathsPerOneMillion","tests","testsPerOneMillion","active","critical","recovered","a","map","leafletElement","eachLayer","layer","options","name","removeLayer","geoJson","type","features","country","countryInfo","lat","lng","long","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","updatedFormatted","casesString","updated","slice","Date","html","marker","icon","divIcon","className","riseOnHover","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","pageName","i","key"],"mappings":"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","file":"component---src-pages-index-js-5b40dac3e1058918da18.js","sourcesContent":["import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport L from 'leaflet';\r\nimport { useTracker } from 'hooks';\r\nimport { Layout, Map } from 'components';\r\n\r\nconst LOCATION = {\r\n  lat: 0,\r\n  lng: 0\r\n};\r\nconst CENTER = [LOCATION.lat, LOCATION.lng];\r\nconst DEFAULT_ZOOM = 2;\r\n\r\nconst IndexPage = () => {\r\n  const { data: stats = {} } = useTracker({\r\n    api: 'all'\r\n  });\r\n\r\n  const { data: countries = [] } = useTracker({\r\n    api: 'countries'\r\n  });\r\n\r\n  const hasCountries = Array.isArray( countries ) && countries.length > 0;\r\n\r\n  const dashboardStats = [\r\n    {\r\n      primary: {\r\n        label: 'Total Cases',\r\n        value: stats ? stats?.cases.toLocaleString( 'en-US' ) : '-'\r\n      },\r\n      secondary: {\r\n        label: 'Per 1 Million',\r\n        value: stats ? stats?.casesPerOneMillion.toLocaleString( 'en-US' ) : '-'\r\n      }\r\n    },\r\n    {\r\n      primary: {\r\n        label: 'Total Deaths',\r\n        value: stats ? stats?.deaths.toLocaleString( 'en-US' ) : '-'\r\n      },\r\n      secondary: {\r\n        label: 'Per 1 Million',\r\n        value: stats ? stats?.deathsPerOneMillion.toLocaleString( 'en-US' ) : '-'\r\n      }\r\n    },\r\n    {\r\n      primary: {\r\n        label: 'Total Tests',\r\n        value: stats ? stats?.tests.toLocaleString( 'en-US' ) : '-'\r\n      },\r\n      secondary: {\r\n        label: 'Per 1 Million',\r\n        value: stats ? stats?.testsPerOneMillion.toLocaleString( 'en-US' ) : '-'\r\n      }\r\n    },\r\n    {\r\n      primary: {\r\n        label: 'Active Cases',\r\n        value: stats ? stats?.active.toLocaleString( 'en-US' ) : '-'\r\n      }\r\n      // secondary: {\r\n      //     label: 'Per 1 Million',\r\n      //     value: stats ? stats?.activePerOneMillion.toLocaleString( 'en-US' ) : '-',\r\n      // },\r\n    },\r\n    {\r\n      primary: {\r\n        label: 'Critical Cases',\r\n        value: stats ? stats?.critical.toLocaleString( 'en-US' ) : '-'\r\n      }\r\n      // secondary: {\r\n      //     label: 'Per 1 Million',\r\n      //     value: stats ? stats?.criticalPerOneMillion.toLocaleString( 'en-US' ) : '-',\r\n      // },\r\n    },\r\n    {\r\n      primary: {\r\n        label: 'Recovered Cases',\r\n        value: stats ? stats?.recovered.toLocaleString( 'en-US' ) : '-'\r\n      }\r\n      // secondary: {\r\n      //     label: 'Per 1 Million',\r\n      //     value: stats ? stats?.recoveredPerOneMillion.toLocaleString( 'en-US' ) : '-',\r\n      // },\r\n    }\r\n  ];\r\n\r\n  /**\r\n   * mapEffect\r\n   * @description Fires a callback once the page renders\r\n   * @example Here this is and example of being used to zoom in and set a popup on load\r\n   */\r\n\r\n  async function mapEffect({ leafletElement: map } = {}) {\r\n    if ( !hasCountries || !map ) return;\r\n\r\n    map.eachLayer(( layer ) => {\r\n      if ( layer?.options?.name === 'Mapbox' ) return;\r\n      map.removeLayer( layer );\r\n    });\r\n\r\n    const geoJson = {\r\n      type: 'FeatureCollection',\r\n      features: countries.map(( country = {}) => {\r\n        const { countryInfo = {} } = country;\r\n        const { lat, long: lng } = countryInfo;\r\n        return {\r\n          type: 'Feature',\r\n          properties: {\r\n            ...country\r\n          },\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: [lng, lat]\r\n          }\r\n        };\r\n      })\r\n    };\r\n\r\n    const geoJsonLayers = new L.GeoJSON( geoJson, {\r\n      pointToLayer: ( feature = {}, latlng ) => {\r\n        const { properties = {} } = feature;\r\n        let updatedFormatted;\r\n        let casesString;\r\n\r\n        const { country, updated, cases, deaths, recovered } = properties;\r\n\r\n        casesString = `${cases}`;\r\n\r\n        if ( cases > 1000000 ) {\r\n          casesString = `${casesString.slice( 0, -6 )}M+`;\r\n        } else if ( cases > 1000 ) {\r\n          casesString = `${casesString.slice( 0, -3 )}K+`;\r\n        }\r\n        if ( updated ) {\r\n          updatedFormatted = new Date( updated ).toLocaleString();\r\n        }\r\n\r\n        const html = `\r\n                    <span class=\"icon-marker\">\r\n                        <span class=\"icon-marker-tooltip\">\r\n                        <h2>${country}</h2>\r\n                        <ul>\r\n                            <li><strong>Confirmed:</strong> ${cases.toLocaleString( 'en-US' )}</li>\r\n                            <li><strong>Deaths:</strong> ${deaths.toLocaleString( 'en-US' )}</li>\r\n                            <li><strong>Recovered:</strong> ${recovered.toLocaleString( 'en-US' )}</li>\r\n                            <!-- <li><strong>Last Update:</strong> ${updatedFormatted}</li> -->\r\n                        </ul>\r\n                        </span>\r\n                        ${casesString}\r\n                    </span>\r\n                    `;\r\n\r\n        return L.marker( latlng, {\r\n          icon: L.divIcon({\r\n            className: 'icon',\r\n            html\r\n          }),\r\n          riseOnHover: true\r\n        });\r\n      }\r\n    });\r\n\r\n    geoJsonLayers.addTo( map );\r\n  }\r\n\r\n  const mapSettings = {\r\n    center: CENTER,\r\n    defaultBaseMap: 'Mapbox',\r\n    zoom: DEFAULT_ZOOM,\r\n    mapEffect\r\n  };\r\n\r\n  return (\r\n    <Layout pageName=\"home\">\r\n      <Helmet>\r\n        <title>COVID-19 Dashboard</title>\r\n      </Helmet>\r\n\r\n      <div className=\"tracker\">\r\n        <Map {...mapSettings} />\r\n        <div className=\"tracker-stats\">\r\n          <ul>\r\n            { dashboardStats.map(({ primary = {}, secondary = {} }, i ) => {\r\n              return (\r\n                <li key={`Stat-${i}`} className=\"tracker-stat\">\r\n                  { primary.value && (\r\n                    <p className=\"tracker-stat-primary\">\r\n                      { primary.value }\r\n                      <strong>{ primary.label }</strong>\r\n                    </p>\r\n                  ) }\r\n                  { secondary.value && (\r\n                    <p className=\"tracker-stat-secondary\">\r\n                      { secondary.value }\r\n                      <strong>{ secondary.label }</strong>\r\n                    </p>\r\n                  ) }\r\n                </li>\r\n              );\r\n            }) }\r\n          </ul>\r\n        </div>\r\n        <div className=\"tracker-last-updated\">\r\n          <p>Last Updated: { stats ? new Date( stats?.updated ).toLocaleString( 'en-us' ) : '-' }</p>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}